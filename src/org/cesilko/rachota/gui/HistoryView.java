/*
 * HistoryView.java
 *
 * Created on 09 August 2005, 20:37
 */

package org.cesilko.rachota.gui;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import org.cesilko.rachota.core.ChangeListener;
import org.cesilko.rachota.core.Day;
import org.cesilko.rachota.core.Plan;
import org.cesilko.rachota.core.Translator;
import org.cesilko.rachota.core.filters.*;

/** Panel providing history view on tasks from the past.
 * @author Jiri Kovalsky
 */
public class HistoryView extends javax.swing.JPanel implements ChangeListener {
    
    /** Creates new HistoryView panel charts and table. */
    public HistoryView() {
        initComponents();
        tbFilters.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbTasks.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cmbPeriod.addItem(Translator.getTranslation("HISTORYVIEW.PERIOD_" + SCALE_DAY));
        cmbPeriod.addItem(Translator.getTranslation("HISTORYVIEW.PERIOD_" + SCALE_WEEK));
        cmbPeriod.addItem(Translator.getTranslation("HISTORYVIEW.PERIOD_" + SCALE_MONTH));
        cmbPeriod.addItem(Translator.getTranslation("HISTORYVIEW.PERIOD_" + SCALE_YEAR));
        historyChart = new HistoryChart(getDays(), null, HistoryChart.TYPE_TOTAL);
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(historyChart, gridBagConstraints);
        cmbPeriod.setSelectedIndex(SCALE_WEEK);
        checkButtons();
        filterTasks();
        tbFilters.getTableHeader().setForeground(java.awt.Color.BLUE);
        tbFilters.getTableHeader().setBackground(java.awt.Color.LIGHT_GRAY);
        tbFilters.getTableHeader().setFont(new java.awt.Font("Arial Bold",  java.awt.Font.BOLD, 12));
        tbTasks.getTableHeader().setForeground(java.awt.Color.BLUE);
        tbTasks.getTableHeader().setBackground(java.awt.Color.LIGHT_GRAY);
        tbTasks.getTableHeader().setFont(new java.awt.Font("Arial Bold",  java.awt.Font.BOLD, 12));
        cmbFilterName.addItem(new DescriptionFilter().toString());
        cmbFilterName.addItem(new KeywordFilter().toString());
        cmbFilterName.addItem(new DurationFilter().toString());
        cmbFilterName.addItem(new PriorityFilter().toString());
        cmbFilterName.addItem(new StateFilter().toString());
        cmbFilterName.addItem(new PrivateFilter().toString());
        setComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblPeriod = new javax.swing.JLabel();
        cmbPeriod = new javax.swing.JComboBox();
        pnPeriod = new javax.swing.JPanel();
        spMinus = new javax.swing.JSpinner();
        btBackward = new javax.swing.JButton();
        txtDate = new javax.swing.JTextField();
        btForward = new javax.swing.JButton();
        spPlus = new javax.swing.JSpinner();
        tpViews = new javax.swing.JTabbedPane();
        pnTimes = new javax.swing.JPanel();
        lblChartType = new javax.swing.JLabel();
        rbTotal = new javax.swing.JRadioButton();
        rbFromTo = new javax.swing.JRadioButton();
        chbHighlightTasks = new javax.swing.JCheckBox();
        cmbFilterName = new javax.swing.JComboBox();
        cmbContentRule = new javax.swing.JComboBox();
        cmbContent = new javax.swing.JComboBox();
        txtContent = new javax.swing.JTextField();
        pnTasks = new javax.swing.JPanel();
        lblFilters = new javax.swing.JLabel();
        spFilters = new javax.swing.JScrollPane();
        tbFilters = new javax.swing.JTable();
        pnButtons = new javax.swing.JPanel();
        btAddFilter = new javax.swing.JButton();
        btEditFilter = new javax.swing.JButton();
        btRemoveFilter = new javax.swing.JButton();
        lblTasks = new javax.swing.JLabel();
        spTasks = new javax.swing.JScrollPane();
        tbTasks = new javax.swing.JTable();
        chbGroupTasks = new javax.swing.JCheckBox();
        pnTotalTime = new javax.swing.JPanel();
        lblTotalTime = new javax.swing.JLabel();
        txtTotalTime = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        setName(Translator.getTranslation("HISTORYVIEW.TB_NAME"));
        lblPeriod.setDisplayedMnemonic(Translator.getMnemonic("HISTORYVIEW.LBL_PERIOD"));
        lblPeriod.setLabelFor(cmbPeriod);
        lblPeriod.setText(Translator.getTranslation("HISTORYVIEW.LBL_PERIOD"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblPeriod, gridBagConstraints);

        cmbPeriod.setToolTipText(Translator.getTranslation("HISTORYVIEW.PERIOD_TOOLTIP"));
        cmbPeriod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cmbPeriod, gridBagConstraints);

        spMinus.setToolTipText(Translator.getTranslation("HISTORYVIEW.SP_MINUS_TOOLTIP"));
        spMinus.setPreferredSize(new java.awt.Dimension(40, 23));
        spMinus.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spMinusStateChanged(evt);
            }
        });

        pnPeriod.add(spMinus);

        btBackward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cesilko/rachota/gui/images/previous.png")));
        btBackward.setToolTipText(Translator.getTranslation("HISTORYVIEW.BT_BACKWARD_TOOLTIP"));
        btBackward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBackwardActionPerformed(evt);
            }
        });

        pnPeriod.add(btBackward);

        txtDate.setEditable(false);
        txtDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDate.setToolTipText(Translator.getTranslation("HISTORYVIEW.TXT_DATE_TOOLTIP"));
        txtDate.setPreferredSize(new java.awt.Dimension(150, 23));
        txtDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDateMouseClicked(evt);
            }
        });

        pnPeriod.add(txtDate);

        btForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cesilko/rachota/gui/images/next.png")));
        btForward.setToolTipText(Translator.getTranslation("HISTORYVIEW.BT_FORWARD_TOOLTIP"));
        btForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btForwardActionPerformed(evt);
            }
        });

        pnPeriod.add(btForward);

        spPlus.setToolTipText(Translator.getTranslation("HISTORYVIEW.SP_PLUS_TOOLTIP"));
        spPlus.setPreferredSize(new java.awt.Dimension(40, 23));
        spPlus.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spPlusStateChanged(evt);
            }
        });

        pnPeriod.add(spPlus);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(pnPeriod, gridBagConstraints);

        pnTimes.setLayout(new java.awt.GridBagLayout());

        lblChartType.setDisplayedMnemonic(Translator.getMnemonic("HISTORYVIEW.LBL_CHART_TYPE"));
        lblChartType.setLabelFor(rbFromTo);
        lblChartType.setText(Translator.getTranslation("HISTORYVIEW.LBL_CHART_TYPE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(lblChartType, gridBagConstraints);

        rbTotal.setSelected(true);
        rbTotal.setText(Translator.getTranslation("HISTORYVIEW.TYPE_TOTAL"));
        rbTotal.setToolTipText(Translator.getTranslation("HISTORYVIEW.TYPE_TOTAL_TOOLTIP"));
        rbTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTotalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(rbTotal, gridBagConstraints);

        rbFromTo.setText(Translator.getTranslation("HISTORYVIEW.TYPE_FROM_TO"));
        rbFromTo.setToolTipText(Translator.getTranslation("HISTORYVIEW.TYPE_FROM_TO_TOOLTIP"));
        rbFromTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFromToActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        pnTimes.add(rbFromTo, gridBagConstraints);

        chbHighlightTasks.setMnemonic(Translator.getMnemonic("HISTORYVIEW.LBL_HIGHLIGHT_TASKS"));
        chbHighlightTasks.setText(Translator.getTranslation("HISTORYVIEW.LBL_HIGHLIGHT_TASKS"));
        chbHighlightTasks.setToolTipText(Translator.getTranslation("HISTORYVIEW.LBL_HIGHLIGHT_TASKS_TOOLTIP"));
        chbHighlightTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbHighlightTasksActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(chbHighlightTasks, gridBagConstraints);

        cmbFilterName.setToolTipText(Translator.getTranslation("FILTERDIALOG.NAME_TOOLTIP"));
        cmbFilterName.setEnabled(false);
        cmbFilterName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFilterNameItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(cmbFilterName, gridBagConstraints);

        cmbContentRule.setToolTipText(Translator.getTranslation("FILTERDIALOG.CONTENT_RULE_TOOLTIP"));
        cmbContentRule.setEnabled(false);
        cmbContentRule.setPreferredSize(new java.awt.Dimension(100, 22));
        cmbContentRule.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbContentRuleItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(cmbContentRule, gridBagConstraints);

        cmbContent.setToolTipText(Translator.getTranslation("FILTERDIALOG.CONTENT_TOOLTIP"));
        cmbContent.setEnabled(false);
        cmbContent.setPreferredSize(new java.awt.Dimension(100, 22));
        cmbContent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbContentItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(cmbContent, gridBagConstraints);

        txtContent.setToolTipText(Translator.getTranslation("FILTERDIALOG.CONTENT_TOOLTIP"));
        txtContent.setEnabled(false);
        txtContent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContentKeyTyped(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTimes.add(txtContent, gridBagConstraints);

        tpViews.addTab(Translator.getTranslation("HISTORYVIEW.TIMES_TAB_NAME"), pnTimes);

        pnTasks.setLayout(new java.awt.GridBagLayout());

        lblFilters.setDisplayedMnemonic(Translator.getMnemonic("HISTORYVIEW.LBL_FILTERS"));
        lblFilters.setLabelFor(tbFilters);
        lblFilters.setText(Translator.getTranslation("HISTORYVIEW.LBL_FILTERS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTasks.add(lblFilters, gridBagConstraints);

        spFilters.setPreferredSize(new java.awt.Dimension(453, 100));
        tbFilters.setModel(new FiltersTableModel());
        tbFilters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFiltersMouseClicked(evt);
            }
        });

        spFilters.setViewportView(tbFilters);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTasks.add(spFilters, gridBagConstraints);

        pnButtons.setLayout(new java.awt.GridBagLayout());

        btAddFilter.setMnemonic(Translator.getMnemonic("HISTORYVIEW.BT_ADD_FILTER"));
        btAddFilter.setText(Translator.getTranslation("HISTORYVIEW.BT_ADD_FILTER"));
        btAddFilter.setToolTipText(Translator.getTranslation("HISTORYVIEW.BT_ADD_FILTER_TOOLTIP"));
        btAddFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddFilterActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnButtons.add(btAddFilter, gridBagConstraints);

        btEditFilter.setMnemonic(Translator.getMnemonic("HISTORYVIEW.BT_EDIT_FILTER"));
        btEditFilter.setText(Translator.getTranslation("HISTORYVIEW.BT_EDIT_FILTER"));
        btEditFilter.setToolTipText(Translator.getTranslation("HISTORYVIEW.BT_EDIT_FILTER_TOOLTIP"));
        btEditFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditFilterActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnButtons.add(btEditFilter, gridBagConstraints);

        btRemoveFilter.setMnemonic(Translator.getMnemonic("HISTORYVIEW.BT_REMOVE_FILTER"));
        btRemoveFilter.setText(Translator.getTranslation("HISTORYVIEW.BT_REMOVE_FILTER"));
        btRemoveFilter.setToolTipText(Translator.getTranslation("HISTORYVIEW.BT_REMOVE_FILTER_TOOLTIP"));
        btRemoveFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveFilterActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnButtons.add(btRemoveFilter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTasks.add(pnButtons, gridBagConstraints);

        lblTasks.setDisplayedMnemonic(Translator.getMnemonic("HISTORYVIEW.LBL_TASKS"));
        lblTasks.setLabelFor(tbTasks);
        lblTasks.setText(Translator.getTranslation("HISTORYVIEW.LBL_TASKS"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTasks.add(lblTasks, gridBagConstraints);

        spTasks.setPreferredSize(new java.awt.Dimension(453, 100));
        tbTasks.setModel(new FilteredTasksTableModel());
        spTasks.setViewportView(tbTasks);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTasks.add(spTasks, gridBagConstraints);

        chbGroupTasks.setMnemonic(Translator.getMnemonic("HISTORYVIEW.CHB_GROUP_TASKS"));
        chbGroupTasks.setSelected(true);
        chbGroupTasks.setText(Translator.getTranslation("HISTORYVIEW.CHB_GROUP_TASKS"));
        chbGroupTasks.setToolTipText(Translator.getTranslation("HISTORYVIEW.CHB_GROUP_TASKS_TOOLTIP"));
        chbGroupTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbGroupTasksActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTasks.add(chbGroupTasks, gridBagConstraints);

        pnTotalTime.setLayout(new java.awt.GridBagLayout());

        lblTotalTime.setText(Translator.getTranslation("HISTORYVIEW.LBL_TOTAL_TIME"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTotalTime.add(lblTotalTime, gridBagConstraints);

        txtTotalTime.setEditable(false);
        txtTotalTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalTime.setToolTipText(Translator.getTranslation("HISTORYVIEW.TXT_TOTAL_TIME_TOOLTIP"));
        txtTotalTime.setPreferredSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTotalTime.add(txtTotalTime, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnTasks.add(pnTotalTime, gridBagConstraints);

        tpViews.addTab(Translator.getTranslation("HISTORYVIEW.TASKS_TAB_NAME"), pnTasks);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(tpViews, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
    
    /** Method called when highlight tasks checkbox is un/checked.
     * @param evt Event that invoked the action.
     */
    private void chbHighlightTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbHighlightTasksActionPerformed
        setComponents();
        historyChart.setHighlightingFilter(getFilter());
    }//GEN-LAST:event_chbHighlightTasksActionPerformed
    
    /** Method called when from/to chart type is required.
     * @param evt Event that invoked the action.
     */
    private void rbFromToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFromToActionPerformed
        rbTotal.setSelected(false);
        rbFromTo.setSelected(true);
        chbHighlightTasks.setEnabled(false);
        historyChart.setChartType(HistoryChart.TYPE_FROM_TO);
        setComponents();
    }//GEN-LAST:event_rbFromToActionPerformed
    
    /** Method called when total times chart type is required.
     * @param evt Event that invoked the action.
     */
    private void rbTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTotalActionPerformed
        rbTotal.setSelected(true);
        rbFromTo.setSelected(false);
        chbHighlightTasks.setEnabled(true);
        historyChart.setChartType(HistoryChart.TYPE_TOTAL);
        setComponents();
        historyChart.setHighlightingFilter(getFilter());
    }//GEN-LAST:event_rbTotalActionPerformed
    
    /** Method called when any key is typed in content textfield.
     * @param evt Event that invoked the action.
     */
    private void txtContentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContentKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER) historyChart.setHighlightingFilter(getFilter());
    }//GEN-LAST:event_txtContentKeyTyped
    
    /** Method called when selection of content item has changed.
     * @param evt Event that invoked the action.
     */
    private void cmbContentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbContentItemStateChanged
        historyChart.setHighlightingFilter(getFilter());
    }//GEN-LAST:event_cmbContentItemStateChanged
    
    /** Method called when selection of content rule item has changed.
     * @param evt Event that invoked the action.
     */
    private void cmbContentRuleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbContentRuleItemStateChanged
        historyChart.setHighlightingFilter(getFilter());
    }//GEN-LAST:event_cmbContentRuleItemStateChanged
    
    /** Method called when selection of filter item has changed.
     * @param evt Event that invoked the action.
     */
    private void cmbFilterNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFilterNameItemStateChanged
        setComponents();
        historyChart.setHighlightingFilter(getFilter());
    }//GEN-LAST:event_cmbFilterNameItemStateChanged
    
    /** Method called when checkbox "Group tasks with same name" is un/checked.
     * @param evt Event that invoked this action.
     */
    private void chbGroupTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbGroupTasksActionPerformed
        FilteredTasksTableModel filteredTasksTableModel = (FilteredTasksTableModel) tbTasks.getModel();
        filteredTasksTableModel.setGroupSameTasks(chbGroupTasks.isSelected());
    }//GEN-LAST:event_chbGroupTasksActionPerformed
    
    /** Method called when user clicked into tables of filters.
     * @param evt Event that invoked this action.
     */
    private void tbFiltersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFiltersMouseClicked
        checkButtons();
    }//GEN-LAST:event_tbFiltersMouseClicked
    
    /** Method called when Edit Filter button was pressed.
     * @param evt Event that invoked this action.
     */
    private void btEditFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditFilterActionPerformed
        int row = tbFilters.getSelectedRow();
        FiltersTableModel tableModel = (FiltersTableModel) tbFilters.getModel();
        AbstractTaskFilter taskFilter = tableModel.getFilter(row);
        new FilterDialog(tableModel, taskFilter).setVisible(true);
        checkButtons();
        filterTasks();
    }//GEN-LAST:event_btEditFilterActionPerformed
    
    /** Method called when Remove Filter button was pressed.
     * @param evt Event that invoked this action.
     */
    private void btRemoveFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveFilterActionPerformed
        int row = tbFilters.getSelectedRow();
        FiltersTableModel tableModel = (FiltersTableModel) tbFilters.getModel();
        AbstractTaskFilter taskFilter = tableModel.getFilter(row);
        tableModel.removeFilter(taskFilter);
        checkButtons();
        filterTasks();
    }//GEN-LAST:event_btRemoveFilterActionPerformed
    
    /** Method called when Add Filter button was pressed.
     * @param evt Event that invoked this action.
     */
    private void btAddFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddFilterActionPerformed
        FiltersTableModel tableModel = (FiltersTableModel) tbFilters.getModel();
        new FilterDialog(tableModel).setVisible(true);
        checkButtons();
        filterTasks();
    }//GEN-LAST:event_btAddFilterActionPerformed
    
    /** Method called when date textfield was clicked to select actual day/week/month/year.
     * @param evt Event that invoked the action.
     */
    private void txtDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDateMouseClicked
        period = new Date();
        cmbPeriodItemStateChanged(null);
    }//GEN-LAST:event_txtDateMouseClicked
    
    /** Method called when period scale should be changed.
     * @param evt Event that invoked the action.
     */
    private void cmbPeriodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodItemStateChanged
        int scale = cmbPeriod.getSelectedIndex();
        SimpleDateFormat sdf = (SimpleDateFormat) SimpleDateFormat.getDateInstance();
        switch (scale) {
            case (SCALE_YEAR):
                sdf.applyPattern("| yyyy");
                txtDate.setText(Tools.replaceAll(sdf.format(period), "|", (String) cmbPeriod.getSelectedItem()));
                break;
            case (SCALE_MONTH):
                sdf.applyPattern("MMMMMMMMMMMMM, yyyy");
                txtDate.setText(sdf.format(period));
                break;
            case (SCALE_WEEK):
                sdf.applyPattern("w. |, yyyy");
                txtDate.setText(Tools.replaceAll(sdf.format(period), "|", (String) cmbPeriod.getSelectedItem()));
                break;
            default:
                sdf.applyPattern("d. MMMMMMMMMMMMM, yyyy");
                txtDate.setText(sdf.format(period));
                break;
        }
        if (historyChart != null) historyChart.setDays(getDays());
        filterTasks();
    }//GEN-LAST:event_cmbPeriodItemStateChanged
    
    /** Method called when forward button was pressed.
     * @param evt Event that invoked the action.
     */
    private void btForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btForwardActionPerformed
        period = shiftPeriod(1);
        cmbPeriodItemStateChanged(null);
    }//GEN-LAST:event_btForwardActionPerformed
    
    /** Method called when backward button was pressed.
     * @param evt Event that invoked the action.
     */
    private void btBackwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBackwardActionPerformed
        period = shiftPeriod(-1);
        cmbPeriodItemStateChanged(null);
    }//GEN-LAST:event_btBackwardActionPerformed
    
    /** Method called when plus spinner was pressed.
     * @param evt Event that invoked the action.
     */
    private void spPlusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spPlusStateChanged
        Integer plus = (Integer) spPlus.getValue();
        int value = plus.intValue();
        if (value < 0) spPlus.setValue(previousPlus);
        else previousPlus = plus;
        historyChart.setDays(getDays());
        filterTasks();
    }//GEN-LAST:event_spPlusStateChanged
    
    /** Method called when minus spinner was pressed.
     * @param evt Event that invoked the action.
     */
    private void spMinusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spMinusStateChanged
        Integer minus = (Integer) spMinus.getValue();
        int value = minus.intValue();
        if (value > 0) spMinus.setValue(previousMinus);
        else previousMinus = minus;
        historyChart.setDays(getDays());
        filterTasks();
    }//GEN-LAST:event_spMinusStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddFilter;
    private javax.swing.JButton btBackward;
    private javax.swing.JButton btEditFilter;
    private javax.swing.JButton btForward;
    private javax.swing.JButton btRemoveFilter;
    private javax.swing.JCheckBox chbGroupTasks;
    private javax.swing.JCheckBox chbHighlightTasks;
    private javax.swing.JComboBox cmbContent;
    private javax.swing.JComboBox cmbContentRule;
    private javax.swing.JComboBox cmbFilterName;
    private javax.swing.JComboBox cmbPeriod;
    private javax.swing.JLabel lblChartType;
    private javax.swing.JLabel lblFilters;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lblTasks;
    private javax.swing.JLabel lblTotalTime;
    private javax.swing.JPanel pnButtons;
    private javax.swing.JPanel pnPeriod;
    private javax.swing.JPanel pnTasks;
    private javax.swing.JPanel pnTimes;
    private javax.swing.JPanel pnTotalTime;
    private javax.swing.JRadioButton rbFromTo;
    private javax.swing.JRadioButton rbTotal;
    private javax.swing.JScrollPane spFilters;
    private javax.swing.JSpinner spMinus;
    private javax.swing.JSpinner spPlus;
    private javax.swing.JScrollPane spTasks;
    private javax.swing.JTable tbFilters;
    private javax.swing.JTable tbTasks;
    private javax.swing.JTabbedPane tpViews;
    private javax.swing.JTextField txtContent;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtTotalTime;
    // End of variables declaration//GEN-END:variables
    
    /** Index of day time scale */
    private static final int SCALE_DAY = 0;
    /** Index of week time scale */
    private static final int SCALE_WEEK = 1;
    /** Index of month time scale */
    private static final int SCALE_MONTH = 2;
    /** Index of year time scale */
    private static final int SCALE_YEAR = 3;
    /** Last correct value of spPlus setting specified by user. */
    private Integer previousPlus = new Integer(0);
    /** Last correct value of spMinus setting specified by user. */
    private Integer previousMinus = new Integer(0);
    /** History chart painter. */
    private HistoryChart historyChart;
    /** Currently selected time period. */
    private Date period = new Date();
    
    /** Shifts selected period for given steps based on currently
     * selected time scale. For example if "day" is selected and
     * step is -1, it returns date before selected one.
     * @param step Number of units to be added/substracted.
     * @return Date determined as period + step * scale.
     */
    private Date shiftPeriod(int step) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(period);
        int scale = cmbPeriod.getSelectedIndex();
        switch (scale) {
            case (SCALE_YEAR):
                calendar.add(Calendar.YEAR, step);
                break;
            case (SCALE_MONTH):
                calendar.add(Calendar.MONTH, step);
                break;
            case (SCALE_WEEK):
                calendar.add(Calendar.WEEK_OF_YEAR, step);
                break;
            default:
                calendar.add(Calendar.DAY_OF_YEAR, step);
                break;
        }
        return calendar.getTime();
    }
    
    /** Returns either first or last date of selected period interval
     * whose data should be processed in the history view.
     * @param firstDate If true, first date of period interval will be
     * returned or last interval date if false.
     * @return First or last date of period interval.
     */
    private Date getDate(boolean firstDate) {
        Calendar calendar = Calendar.getInstance();
        int offset = firstDate ? previousMinus.intValue() : previousPlus.intValue();
        calendar.setTime(shiftPeriod(offset));
        int scale = cmbPeriod.getSelectedIndex();
        offset = 1;
        switch (scale) {
            case (SCALE_YEAR):
                if (!firstDate) offset = calendar.getActualMaximum(Calendar.DAY_OF_YEAR);
                calendar.set(Calendar.DAY_OF_YEAR, offset);
                break;
            case (SCALE_MONTH):
                if (!firstDate) offset = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                calendar.set(Calendar.DAY_OF_MONTH, offset);
                break;
            case (SCALE_WEEK):
                if (firstDate)
                    offset = calendar.getFirstDayOfWeek();
                else
                    offset = calendar.getActualMaximum(Calendar.DAY_OF_WEEK) + 1;
                calendar.set(Calendar.DAY_OF_WEEK, offset);
        }
        return calendar.getTime();
    }
    
    /** Returns all days in selected period interval whose tasks will be processed.
     * @return All days in selected period interval whose tasks will be processed.
     */
    private Vector getDays() {
        Vector days = new Vector();
        Calendar calendar = Calendar.getInstance();
        Plan plan = Plan.getDefault();
        
        Date firstDate = getDate(true);
        Date lastDate = getDate(false);
        
        calendar.setTime(lastDate);
        String lastDayID = plan.getDayID(calendar);
        
        Day day = plan.getDay(firstDate);
        days.add(day);
        while (true) {
            calendar.setTime(day.getDate());
            if (plan.getDayID(calendar).equals(lastDayID)) break;
            day = plan.getDayAfter(day);
            days.add(day);
        }
        return days;
    }
    
    /** Checks whether edit and remove filter buttons should be enabled.
     */
    private void checkButtons() {
        int row = tbFilters.getSelectedRow();
        btRemoveFilter.setEnabled(row != -1);
        btEditFilter.setEnabled(row != -1);
    }
    
    /** Takes all tasks from days in the selected period and filters them
     * using all defined filters.
     */
    private void filterTasks() {
        Vector filteredTasks = new Vector();
        Iterator iterator = getDays().iterator();
        while (iterator.hasNext()) {
            Day day = (Day) iterator.next();
            filteredTasks.addAll(day.getTasks());
        }
        FiltersTableModel filtersTableModel = (FiltersTableModel) tbFilters.getModel();
        iterator = filtersTableModel.getFilters().iterator();
        while (iterator.hasNext()) {
            AbstractTaskFilter abstractTaskFilter = (AbstractTaskFilter) iterator.next();
            filteredTasks = abstractTaskFilter.filterTasks(filteredTasks);
        }
        FilteredTasksTableModel filteredTasksTableModel = (FilteredTasksTableModel) tbTasks.getModel();
        filteredTasksTableModel.setTasks(filteredTasks);
        txtTotalTime.setText(Tools.getTime(filteredTasksTableModel.getTotalTime()));
    }
    
    /** Sets content rules and values according to currently selected task filter.
     */
    private void setComponents() {
        if (!chbHighlightTasks.isSelected() || !chbHighlightTasks.isEnabled()) {
            cmbFilterName.setEnabled(false);
            cmbContentRule.setEnabled(false);
            txtContent.setEnabled(false);
            cmbContent.setEnabled(false);
            return;
        }
        cmbFilterName.setEnabled(true);
        cmbContentRule.setEnabled(true);
        AbstractTaskFilter taskFilter = getFilter();
        Vector contentRules = taskFilter.getContentRules();
        int length = contentRules.size();
        cmbContentRule.removeAllItems();
        for (int i=0; i<length; i++)
            cmbContentRule.addItem(contentRules.get(i));
        cmbContentRule.setSelectedIndex(0);
        
        Vector contentValues = taskFilter.getContentValues();
        cmbContent.removeAllItems();
        if (contentValues != null) {
            length = contentValues.size();
            for (int i=0; i<length; i++)
                cmbContent.addItem(contentValues.get(i));
            cmbContent.setSelectedIndex(0);
        } else txtContent.setText("");
        if (taskFilter instanceof DurationFilter) txtContent.setText(Tools.getTime(0));
        cmbContent.setEnabled(contentValues != null);
        txtContent.setEnabled(contentValues == null);
    }
    
    /** Returns task filter object based on currently selected options.
     * @return Task filter object based on currently selected options.
     */
    private AbstractTaskFilter getFilter() {
        if (!chbHighlightTasks.isSelected()) return null;
        String filterName = (String) cmbFilterName.getSelectedItem();
        AbstractTaskFilter taskFilter = null;
        if (new DescriptionFilter().toString().equals(filterName)) {
            taskFilter = new DescriptionFilter();
            taskFilter.setContent(txtContent.getText());
        }
        if (new KeywordFilter().toString().equals(filterName)) {
            taskFilter = new KeywordFilter();
            taskFilter.setContent(txtContent.getText());
        }
        if (new DurationFilter().toString().equals(filterName)) {
            taskFilter = new DurationFilter();
            taskFilter.setContent(Tools.getTime(0));
            String content = txtContent.getText();
            if (content.equals("")) content = Tools.getTime(0);
            try {
                if (content.length() != 8) throw new NumberFormatException("Error: invalid task duration specified: " + content);
                taskFilter.setContent(Tools.getTime(Tools.getTime(content)));
            } catch (NumberFormatException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, Translator.getTranslation("WARNING.INVALID_DURATION"), Translator.getTranslation("WARNING.WARNING_TITLE"), JOptionPane.WARNING_MESSAGE);
            }
        }
        if (new PriorityFilter().toString().equals(filterName)) {
            taskFilter = new PriorityFilter();
            taskFilter.setContent("" + cmbContent.getSelectedIndex());
        }
        if (new StateFilter().toString().equals(filterName)) {
            taskFilter = new StateFilter();
            taskFilter.setContent("" + cmbContent.getSelectedIndex());
        }
        if (new PrivateFilter().toString().equals(filterName)) {
            taskFilter = new PrivateFilter();
            taskFilter.setContent(Boolean.toString(cmbContent.getSelectedIndex() == 0));
        }
        taskFilter.setContentRule(cmbContentRule.getSelectedIndex());
        return taskFilter;
    }
    
    /** Given object fired a change event.
     * @param object Object that was changed.
     * @param changeType Type of change.
     */
    public void eventFired(Object object, int changeType) {
        historyChart.repaint();
        filterTasks();
    }
}