/*
 * TaskDialog.java
 *
 * Created on 11 September 2004, 22:00
 */

package org.cesilko.rachota.gui;

import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import org.cesilko.rachota.core.Day;
import org.cesilko.rachota.core.RegularTask;
import org.cesilko.rachota.core.Task;
import org.cesilko.rachota.core.Translator;

/** Visualizer of task.
 *
 * @author  Jiri Kovalsky
 */
public class TaskDialog extends javax.swing.JDialog {
    
    /** Task that is being edited. */
    private Task task;
    /** Day which new task should be added to. */
    private Day day;
    
    /** Creates new dialog for editing of given task.
     * @param task Task which is going to be edited.
     * @param day Day which the task belongs to.
     */
    public TaskDialog(Task task, Day day) {
        this.task = task;
        this.day = day;
        initComponents();
        txtDescription.setText(task.getDescription());
        txtCategory.setText(task.getKeyword());
        taNotes.setText(task.getNotes());
        cmbPriority.setSelectedIndex(task.getPriority());
        Date notificationTime = task.getNotificationTime();
        boolean notification = notificationTime != null;
        chbNotification.setSelected(notification);
        spHours.setEnabled(notification);
        lblColon.setEnabled(notification);
        spMinutes.setEnabled(notification);
        if (notification) {
            Calendar time = Calendar.getInstance();
            time.setTime(notificationTime);
            spHours.setValue(new Integer(time.get(Calendar.HOUR_OF_DAY)));
            spMinutes.setValue(new Integer(time.get(Calendar.MINUTE)));
        }
        chbAutoStart.setEnabled(notification);
        chbAutoStart.setSelected(task.automaticStart());
        boolean regular = task instanceof RegularTask;
        chbRegular.setSelected(regular);
        cmbRepetition.setEnabled(false);
        chbRegular.setEnabled(task == null);
        if (regular) {
            RegularTask regularTask = (RegularTask) task;
            cmbRepetition.setSelectedIndex(regularTask.getFrequency());
        }
        chbPrivate.setSelected(task.privateTask());
    }
    
    /** Creates new dialog for creating new task for given day.
     * @param day Day which new task should be added to.
     */
    public TaskDialog(Day day) {
        this.task = null;
        this.day = day;
        initComponents();
        chbRegular.setEnabled(false);
        cmbRepetition.setEnabled(false);
    }
    
    /** Creates new dialog for editing existing regular task.
     * @param regularTask Regular task that should be edited.
     */
    public TaskDialog(RegularTask regularTask) {
        this(regularTask, null);
        chbRegular.setSelected(true);
        chbRegular.setEnabled(false);
        cmbRepetition.setEnabled(true);
    }
    
    /** Creates new dialog for creating new regular task.
     */
    public TaskDialog() {
        this.task = null;
        this.day = null;
        initComponents();
        chbRegular.setSelected(true);
        chbRegular.setEnabled(false);
        cmbRepetition.setEnabled(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblDescription = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        lblCategory = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        lblNotes = new javax.swing.JLabel();
        spNotes = new javax.swing.JScrollPane();
        taNotes = new javax.swing.JTextArea();
        lblPriority = new javax.swing.JLabel();
        cmbPriority = new javax.swing.JComboBox();
        chbNotification = new javax.swing.JCheckBox();
        spHours = new javax.swing.JSpinner();
        lblColon = new javax.swing.JLabel();
        spMinutes = new javax.swing.JSpinner();
        chbAutoStart = new javax.swing.JCheckBox();
        chbRegular = new javax.swing.JCheckBox();
        cmbRepetition = new javax.swing.JComboBox();
        chbPrivate = new javax.swing.JCheckBox();
        pnButtons = new javax.swing.JPanel();
        btOK = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle(Translator.getTranslation("TASKDIALOG.TITLE"));
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        lblDescription.setDisplayedMnemonic(Translator.getMnemonic("TASKDIALOG.LBL_DESCRIPTION"));
        lblDescription.setLabelFor(txtDescription);
        lblDescription.setText(Translator.getTranslation("TASKDIALOG.LBL_DESCRIPTION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblDescription, gridBagConstraints);

        txtDescription.setToolTipText(Translator.getTranslation("TASKDIALOG.TXT_DESCRIPTION_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(txtDescription, gridBagConstraints);

        lblCategory.setDisplayedMnemonic(Translator.getMnemonic("TASKDIALOG.LBL_CATEGORY"));
        lblCategory.setLabelFor(txtCategory);
        lblCategory.setText(Translator.getTranslation("TASKDIALOG.LBL_CATEGORY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblCategory, gridBagConstraints);

        txtCategory.setToolTipText(Translator.getTranslation("TASKDIALOG.TXT_CATEGORY_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(txtCategory, gridBagConstraints);

        lblNotes.setDisplayedMnemonic(Translator.getMnemonic("TASKDIALOG.LBL_NOTES"));
        lblNotes.setLabelFor(taNotes);
        lblNotes.setText(Translator.getTranslation("TASKDIALOG.LBL_NOTES"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblNotes, gridBagConstraints);

        taNotes.setRows(3);
        taNotes.setToolTipText(Translator.getTranslation("TASKDIALOG.TXT_NOTES_TOOLTIP"));
        spNotes.setViewportView(taNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(spNotes, gridBagConstraints);

        lblPriority.setDisplayedMnemonic(Translator.getMnemonic("TASKDIALOG.LBL_PRIORITY"));
        lblPriority.setLabelFor(cmbPriority);
        lblPriority.setText(Translator.getTranslation("TASKDIALOG.LBL_PRIORITY"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblPriority, gridBagConstraints);

        for (int i=Task.PRIORITY_HIGH; i<=Task.PRIORITY_LOW; i++)
        cmbPriority.addItem(Task.getPriority(i));
        cmbPriority.setSelectedIndex(Task.PRIORITY_MEDIUM);
        cmbPriority.setToolTipText(Translator.getTranslation("TASKDIALOG.CMB_PRIORITY_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cmbPriority, gridBagConstraints);

        chbNotification.setMnemonic(Translator.getMnemonic("TASKDIALOG.CHB_NOTIFICATION"));
        chbNotificationChanged(null);
        chbNotification.setText(Translator.getTranslation("TASKDIALOG.CHB_NOTIFICATION"));
        chbNotification.setToolTipText(Translator.getTranslation("TASKDIALOG.CHB_NOTIFICATION_TOOLTIP"));
        chbNotification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbNotificationChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(chbNotification, gridBagConstraints);

        spHours.setToolTipText(Translator.getTranslation("TASKDIALOG.JSP_HOURS_TOOLTIP"));
        spHours.setMinimumSize(new java.awt.Dimension(35, 18));
        spHours.setPreferredSize(new java.awt.Dimension(35, 18));
        spHours.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spHoursStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(spHours, gridBagConstraints);

        lblColon.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(lblColon, gridBagConstraints);

        spMinutes.setToolTipText(Translator.getTranslation("TASKDIALOG.JSP_MINUTES_TOOLTIP"));
        spMinutes.setMinimumSize(new java.awt.Dimension(35, 18));
        spMinutes.setPreferredSize(new java.awt.Dimension(35, 18));
        spMinutes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spMinutesStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(spMinutes, gridBagConstraints);

        chbAutoStart.setMnemonic(Translator.getMnemonic("TASKDIALOG.CHB_AUTOSTART"));
        chbAutoStart.setText(Translator.getTranslation("TASKDIALOG.CHB_AUTOSTART"));
        chbAutoStart.setToolTipText(Translator.getTranslation("TASKDIALOG.CHB_AUTOSTART_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(chbAutoStart, gridBagConstraints);

        chbRegular.setText(Translator.getTranslation("TASKDIALOG.CHB_REGULAR"));
        chbRegular.setToolTipText(Translator.getTranslation("TASKDIALOG.CHB_REGULAR_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(chbRegular, gridBagConstraints);

        for (int i=RegularTask.FREQUENCY_DAILY; i<=RegularTask.FREQUENCY_SUNDAY; i++)
        cmbRepetition.addItem(RegularTask.getFrequency(i));
        cmbRepetition.setSelectedIndex(RegularTask.FREQUENCY_DAILY);
        cmbRepetition.setToolTipText(Translator.getTranslation("TASKDIALOG.CMB_REPETITION_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cmbRepetition, gridBagConstraints);

        chbPrivate.setMnemonic(Translator.getMnemonic("TASKDIALOG.CHB_PRIVATE"));
        chbPrivate.setText(Translator.getTranslation("TASKDIALOG.CHB_PRIVATE"));
        chbPrivate.setToolTipText(Translator.getTranslation("TASKDIALOG.CHB_PRIVATE_TOOLTIP"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(chbPrivate, gridBagConstraints);

        btOK.setMnemonic(Translator.getMnemonic("TASKDIALOG.BT_OK_NAME"));
        btOK.setText(Translator.getTranslation("TASKDIALOG.BT_OK_NAME"));
        btOK.setToolTipText(Translator.getTranslation("TASKDIALOG.BT_OK_TOOLTIP"));
        btOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOKActionPerformed(evt);
            }
        });

        pnButtons.add(btOK);

        btCancel.setMnemonic(Translator.getMnemonic("TASKDIALOG.BT_CANCEL_NAME"));
        btCancel.setText(Translator.getTranslation("TASKDIALOG.BT_CANCEL_NAME"));
        btCancel.setToolTipText(Translator.getTranslation("TASKDIALOG.BT_CANCEL_TOOLTIP"));
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        pnButtons.add(btCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pnButtons, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-364)/2, 400, 364);
    }
    // </editor-fold>//GEN-END:initComponents
    
    /** Method called when ok button was pressed.
     * @param evt Event that invoked this method call.
     */
    private void btOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOKActionPerformed
        String description = txtDescription.getText();
        if (day != null) {
            boolean error = false;
            if (day.getTask(description) != null) // Is there a task in day's plan with same description ?
                if (task == null) // Are we creating new task ?
                    error = true;
                else // We are editing some task
                    if (!task.getDescription().equals(description)) // Was its description changed ?
                        error = true;
            if (error) {
                JOptionPane.showMessageDialog(this, Translator.getTranslation("ERROR.TASK_EXISTS"), Translator.getTranslation("ERROR.ERROR_TITLE"), JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        String keyword = txtCategory.getText();
        String notes = taNotes.getText();
        int priority = cmbPriority.getSelectedIndex();
        int state = Task.STATE_NEW;
        long duration = 0;
        Date notificationTime = null;
        boolean automaticStart = false;
        boolean privateTask = chbPrivate.isSelected();
        if (chbNotification.isSelected()) {
            Integer hours = (Integer) spHours.getValue();
            Integer minutes = (Integer) spMinutes.getValue();
            Calendar time = Calendar.getInstance();
            time.set(Calendar.HOUR_OF_DAY, hours.intValue());
            time.set(Calendar.MINUTE, minutes.intValue());
            notificationTime = time.getTime();
            automaticStart = chbAutoStart.isSelected();
        }
        if (task != null) { // Are we editing some task ?
            task.setDescription(description);
            task.setKeyword(keyword);
            task.setNotes(notes);
            task.setPriority(priority);
            task.setNotificationTime(notificationTime);
            task.setAutomaticStart(automaticStart);
            task.setPrivateTask(privateTask);
            if (task instanceof RegularTask) {
                RegularTask regularTask = (RegularTask) task;
                regularTask.setFrequency(cmbRepetition.getSelectedIndex());
            }
            firePropertyChange("task_changed", null, task);
        } else {
            if (chbRegular.isSelected()) {
                RegularTask regularTask = new RegularTask(description, keyword, notes, priority, state, duration, notificationTime, automaticStart, privateTask, cmbRepetition.getSelectedIndex());
                task = regularTask;
            } else {
                task = new Task(description, keyword, notes, priority, state, duration, notificationTime, automaticStart, privateTask);
                day.addTask(task);
            }
            firePropertyChange("task_created", null, task);
        }
        closeDialog(null);
    }//GEN-LAST:event_btOKActionPerformed
    
    /** Method called when cancel button was pressed.
     * @param evt Event that invoked this method call.
     */
    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_btCancelActionPerformed
    
    /** Method called when minutes of notification time were changed.
     * @param evt Event that invoked this method call.
     */
    private void spMinutesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spMinutesStateChanged
        Integer value = (Integer) spMinutes.getValue();
        if (value.intValue() > 59) spMinutes.setValue(new Integer(59));
        if (value.intValue() < 0) spMinutes.setValue(new Integer(0));
    }//GEN-LAST:event_spMinutesStateChanged
    
    /** Method called when hours of notification time were changed.
     * @param evt Event that invoked this method call.
     */
    private void spHoursStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spHoursStateChanged
        Integer value = (Integer) spHours.getValue();
        if (value.intValue() > 23) spHours.setValue(new Integer(23));
        if (value.intValue() < 0) spHours.setValue(new Integer(0));
    }//GEN-LAST:event_spHoursStateChanged
    
    /** Method called when notification was turned on/off.
     * @param evt Event that invoked this method call.
     */
    private void chbNotificationChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbNotificationChanged
        boolean value = chbNotification.isSelected();
        spHours.setEnabled(value);
        lblColon.setEnabled(value);
        spMinutes.setEnabled(value);
        chbAutoStart.setEnabled(value);
    }//GEN-LAST:event_chbNotificationChanged
    
    /** Method called when dialog should be closed.
     * @param evt Event that invoked this method call.
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
    }//GEN-LAST:event_closeDialog
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btOK;
    private javax.swing.JCheckBox chbAutoStart;
    private javax.swing.JCheckBox chbNotification;
    private javax.swing.JCheckBox chbPrivate;
    private javax.swing.JCheckBox chbRegular;
    private javax.swing.JComboBox cmbPriority;
    private javax.swing.JComboBox cmbRepetition;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblColon;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblPriority;
    private javax.swing.JPanel pnButtons;
    private javax.swing.JSpinner spHours;
    private javax.swing.JSpinner spMinutes;
    private javax.swing.JScrollPane spNotes;
    private javax.swing.JTextArea taNotes;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtDescription;
    // End of variables declaration//GEN-END:variables
    
    /** Return task that was edited or created by this dialog.
     * @return Task that was edited or created by this dialog.
     */
    public Task getTask() {
        return task;
    }
}